<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ta的笑很甜</title>
  
  <subtitle>你好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-24T23:30:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ta 的笑很甜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-3--IOC&amp;DI</title>
    <link href="http://yoursite.com/2019/03/25/Spring-3--IOC&amp;DI/"/>
    <id>http://yoursite.com/2019/03/25/Spring-3--IOC&amp;DI/</id>
    <published>2019-03-25T07:33:39.281Z</published>
    <updated>2019-03-24T23:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="1、IOC-amp-DI-概述"><a href="#1、IOC-amp-DI-概述" class="headerlink" title="1、IOC&amp;DI 概述"></a>1、IOC&amp;DI 概述</h3><h4 id="1-1、IOC-控制反转"><a href="#1-1、IOC-控制反转" class="headerlink" title="1-1、IOC-控制反转"></a>1-1、IOC-控制反转</h4><p>IOC(Inversion of Control)：其思想是反转资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源. 作为回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送给它所管理的组件, 组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为查找的被动形式。</p><hr><h4 id="1-2、DI-依赖注入"><a href="#1-2、DI-依赖注入" class="headerlink" title="1-2、DI-依赖注入"></a>1-2、DI-依赖注入</h4><p>DI(Dependency Injection) — IOC 的另一种表述方式：即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入. 相对于 IOC 而言，这种表述更直接。</p><hr><h4 id="1-3、在-Spring-IOC-容器中配置-Bean"><a href="#1-3、在-Spring-IOC-容器中配置-Bean" class="headerlink" title="1-3、在 Spring IOC 容器中配置 Bean"></a>1-3、在 Spring IOC 容器中配置 Bean</h4><ul><li>1、在 Spring IOC 容器读取 Bean 配置创建 Bean 实例之前, 必须对它进行实例化. 只有在容器实例化后, 才可以从 IOC 容器里获取 Bean 实例并使用。</li><li><p>2、Spring 提供了两种类型的 IOC 容器实现。</p><ul><li>BeanFactory: IOC 容器的基本实现：</li></ul><ul><li>ApplicationContext: 提供了更多的高级特性. 是 BeanFactory 的子接口。</li></ul></li></ul><hr><h3 id="2、配置-Bean"><a href="#2、配置-Bean" class="headerlink" title="2、配置 Bean"></a>2、配置 Bean</h3><h4 id="2-1、配置形式"><a href="#2-1、配置形式" class="headerlink" title="2-1、配置形式"></a>2-1、配置形式</h4><ul><li><strong>基于 XML 文件的配置方式</strong></li><li>基于注解的方式（实际开发中主要使用该方式）</li></ul><hr><h4 id="2-2、Bean-的配置方式"><a href="#2-2、Bean-的配置方式" class="headerlink" title="2-2、Bean 的配置方式"></a>2-2、Bean 的配置方式</h4><ul><li><strong>通过全类名（反射）</strong></li><li>通过工厂方法（静态工厂方法&amp;实例工厂方法）</li><li>FactoryBean</li></ul><hr><h4 id="2-3、IOC-容器-BeanFactory-amp-ApplicationContext-概述"><a href="#2-3、IOC-容器-BeanFactory-amp-ApplicationContext-概述" class="headerlink" title="2-3、IOC 容器 BeanFactory &amp; ApplicationContext 概述"></a>2-3、IOC 容器 BeanFactory &amp; ApplicationContext 概述</h4><ul><li>BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；ApplicationContext 面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory</li><li>ApplicationContext 接口</li></ul><p><img src="./images/1524537491931.jpg" alt="ApplicationContext 类图"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext 的主要实现类：</span><br><span class="line">ClassPathXmlApplicationContext：从 类路径下加载配置文件</span><br><span class="line">FileSystemXmlApplicationContex<span class="variable">t:</span> 从文件系统中加载配置文件</span><br><span class="line"></span><br><span class="line">ConfigurableApplicationContext 扩展于 ApplicationContext，新增加两个主要方法：refresh() 和 <span class="keyword">close</span>()， 让 ApplicationContext 具有启动、刷新和关闭上下文的能力。</span><br><span class="line"></span><br><span class="line">ApplicationContext 在初始化上下文时就实例化所有单例的 Bean。</span><br><span class="line"></span><br><span class="line">WebApplicationContext 是专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作。</span><br></pre></td></tr></table></figure><p>从容器中 获取 Bean</p><p><img src="./images/1524537884136.jpg" alt="getBean()方法"></p><hr><h4 id="2-4、依赖注入的方式"><a href="#2-4、依赖注入的方式" class="headerlink" title="2-4、依赖注入的方式"></a>2-4、依赖注入的方式</h4><ul><li>属性注入（注入细节）<ul><li>字面值</li><li>引用其他 Bean</li><li>内部Bean</li><li>注入参数：（null 值和级联属性）</li><li>集合属性&amp; utility scheme 定义集合</li><li>使用 P 命名空间</li></ul></li><li>构造器注入</li><li>泛型依赖注入</li></ul><p>1、Beans<br>com.atguigu.spring.helloworld.HelloWorld<br>com.atguigu.spring.ref.Dao<br>com.atguigu.spring.ref.Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld's constructor..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"setUser:"</span> + user);</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello: "</span> + user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.spring.ref;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dataSource = <span class="string">"dbcp"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save by "</span> + dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Dao's Constructor..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"[dataSource]:"</span>+dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.spring.ref;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Dao dao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(Dao dao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dao = dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dao <span class="title">getDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Service's save"</span>);</span><br><span class="line">dao.save();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Spring xml配置Beans</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、属性注入：配置一个 bean 通过 setter 方法 为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld1"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.HelloWorld"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"Jerry"</span>/&gt;</span><span class="comment">&lt;!-- 为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、构造器注入：通过构造器注入属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld3"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.HelloWorld"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Mike"</span>/&gt;</span><span class="comment">&lt;!-- 要求: 在 Bean 中必须有对应的构造器.  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2-1、若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以根据 index 和 value 进行更加精确的定位. (了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.Car"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"KUGA"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"ChangAnFord"</span> <span class="attr">index</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"250000"</span> <span class="attr">type</span>=<span class="string">"float"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、属性注入细节：字面值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.Car"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"ChangAnMazda"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;ATARZA&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!-- 若字面值中包含特殊字符, 则可以使用 CDATA 来进行赋值. (了解) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"180"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、属性注入细节：引用其他 bean 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao5"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"dao5"</span>/&gt;</span><span class="comment">&lt;!-- 通过 ref 属性值指定当前属性指向哪一个 bean! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5、属性注入细节：声明使用内部 bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service2"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span>&gt;</span><span class="comment">&lt;!-- 内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">value</span>=<span class="string">"c3p0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--6、属性注入细节：注入参数之级联属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"action"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Action"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">ref</span>=<span class="string">"service2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service.dao.dataSource"</span> <span class="attr">value</span>=<span class="string">"DBCP2"</span>/&gt;</span><span class="comment">&lt;!-- 设置级联属性(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao2"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 为 Dao 的 dataSource 属性赋值为 null, 若某一个 bean 的属性值不是 null, 使用时需要为其设置为 null(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 7、属性注入细节：装配集合属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"Jack"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span><span class="comment">&lt;!-- 使用 list 元素来装配集合属性 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 7-1、声明集合类型的 bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--7-2、引用外部声明的集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"Rose"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cars"</span> <span class="attr">ref</span>=<span class="string">"cars"</span>/&gt;</span><span class="comment">&lt;!-- 引用外部声明的 list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--8、属性注入细节：定义 P 命名空间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:cars-ref</span>=<span class="string">"cars"</span> <span class="attr">p:userName</span>=<span class="string">"Titannic"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         bean 的配置能够继承吗 ? 使用 parent 来完成继承</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user4"</span> <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">p:userName</span>=<span class="string">"Bob"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user6"</span> <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">p:userName</span>=<span class="string">"维多利亚"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 depents-on --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user5"</span> <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">p:userName</span>=<span class="string">"Backham"</span> <span class="attr">depends-on</span>=<span class="string">"user6"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试 Main </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.ref.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试未使用Spring 前对象的实例化操作*/</span></span><br><span class="line">HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">helloWorld.setUser(<span class="string">"Tom"</span>);</span><br><span class="line">helloWorld.hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试使用 Spring 容器 后 对象实例化的操作*/</span></span><br><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);<span class="comment">//创建 Spring 的 IOC 容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、测试 通过 setter 方法注入属性值</span></span><br><span class="line">HelloWorld helloWorld1= (HelloWorld) ctx.getBean(<span class="string">"helloWorld1"</span>);</span><br><span class="line">helloWorld1.hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据类型来获取 bean 的实例: 要求在  IOC 容器中只有一个与之类型匹配的 bean, 若有多个则会抛出异常.</span></span><br><span class="line"><span class="comment">// 一般情况下, 该方法可用, 因为一般情况下, 在一个 IOC 容器中一个类型对应的 bean 也只有一个.</span></span><br><span class="line"><span class="comment">//HelloWorld helloWorld1 = ctx.getBean(HelloWorld.class);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、测试通过构造器为属性赋值</span></span><br><span class="line">HelloWorld helloWorld3 = (HelloWorld)ctx.getBean(<span class="string">"helloWorld3"</span>);</span><br><span class="line">helloWorld3.hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2-1、测试 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值*/</span></span><br><span class="line">Car car = (Car) ctx.getBean(<span class="string">"car"</span>);</span><br><span class="line">System.out.println(car);<span class="comment">//Car [company=ChangAnFord, brand=KUGA, maxSpeed=0, price=250000.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*3、属性注入细节：字面值*/</span></span><br><span class="line">Car car2= (Car) ctx.getBean(<span class="string">"car2"</span>);</span><br><span class="line">System.out.println(car2);<span class="comment">//Car [company=ChangAnMazda, brand=&lt;ATARZA&gt;, maxSpeed=180, price=0.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 属性注入细节：引用其他 Bean+级联属性设置</span></span><br><span class="line">Service service2= (Service) ctx.getBean(<span class="string">"service2"</span>);</span><br><span class="line">System.out.print(<span class="string">"service2:"</span>+service2.getDao().toString());<span class="comment">//由于级联属性的设置，输出结果为：[dataSource]:DBCP2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7、属性注入细节：装配集合属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-5、自动装配"><a href="#2-5、自动装配" class="headerlink" title="2-5、自动装配"></a>2-5、自动装配</h4><ul><li>XML 配置里的 Bean 自动装配。</li><li>XML 配置里的 Bean 自动装配的缺点。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、自动装配: 只声明 bean, 而把 bean 之间的关系交给 IOC 容器来完成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">byType: 根据类型进行自动装配. 但要求 IOC 容器中只有一个类型对应的 bean, 若有多个则无法完成自动装配.</span></span><br><span class="line"><span class="comment">byName: 若属性名和某一个 bean 的 id 名一致, 即可完成自动装配. 若没有 id 一致的, 则无法完成自动装配</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在使用 XML 配置时, 自动装配用的不多. 但在基于 注解 的配置时, 自动装配使用的较多.  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">value</span>=<span class="string">"C3P0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：实际项目中很少使用xml方式的自动装配，在基于 注解 的配置时, 自动装配使用的较多，此处XML 配置方式的自动装配仅做了解。</p><hr><h4 id="2-6、Bean-之间的关系"><a href="#2-6、Bean-之间的关系" class="headerlink" title="2-6、Bean 之间的关系"></a>2-6、Bean 之间的关系</h4><ul><li>继承</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Spring</span> 允许继承 <span class="keyword">bean </span>的配置, 被继承的 <span class="keyword">bean </span>称为父 <span class="keyword">bean. </span>继承这个父 <span class="keyword">Bean </span>的 <span class="keyword">Bean </span>称为子 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword">子 </span><span class="keyword">Bean </span>从父 <span class="keyword">Bean </span>中继承配置, 包括 <span class="keyword">Bean </span>的属性配置</span><br><span class="line">子 <span class="keyword">Bean </span>也可以覆盖从父 <span class="keyword">Bean </span>继承过来的配置</span><br><span class="line">父 <span class="keyword">Bean </span>可以作为配置模板, 也可以作为 <span class="keyword">Bean </span>实例. 若只想把父 <span class="keyword">Bean </span>作为模板, 可以设置 &lt;<span class="keyword">bean&gt; </span>的abstract 属性为 true, 这样 Spring 将不会实例化这个 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword">并不是 </span>&lt;<span class="keyword">bean&gt; </span>元素里的所有属性都会被继承. 比如: autowire, abstract 等.</span><br><span class="line">也可以忽略父 <span class="keyword">Bean </span>的 class 属性, 让子 <span class="keyword">Bean </span>指定自己的类, 而共享相同的属性配置. 但此时 abstract 必须设为 true</span><br></pre></td></tr></table></figure><ul><li>依赖</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Spring</span> 允许用户通过 depends-on 属性设定 <span class="keyword">Bean </span>前置依赖的<span class="keyword">Bean，前置依赖的 </span><span class="keyword">Bean </span>会在本 <span class="keyword">Bean </span>实例化之前创建好</span><br><span class="line">如果前置依赖于多个 <span class="keyword">Bean，则可以通过逗号，空格或的方式配置 </span><span class="keyword">Bean </span>的名称</span><br></pre></td></tr></table></figure><hr><h4 id="2-7、Bean-的作用域"><a href="#2-7、Bean-的作用域" class="headerlink" title="2-7、Bean 的作用域"></a>2-7、Bean 的作用域</h4><p>在 Spring 中, 可以在 <bean> 元素的 scope 属性里设置 Bean 的作用域。</bean></p><ul><li>singleton &amp; prototype</li></ul><p>beans-auto.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、自动装配: 只声明 bean, 而把 bean 之间的关系交给 IOC 容器来完成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">byType: 根据类型进行自动装配. 但要求 IOC 容器中只有一个类型对应的 bean, 若有多个则无法完成自动装配.</span></span><br><span class="line"><span class="comment">byName: 若属性名和某一个 bean 的 id 名一致, 即可完成自动装配. 若没有 id 一致的, 则无法完成自动装配</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在使用 XML 配置时, 自动装配用的不多. 但在基于 注解 的配置时, 自动装配使用的较多.  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">value</span>=<span class="string">"C3P0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、默认情况下 bean 是单例的! 即为 singleton--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 但有的时候, bean 就不能使单例的. 例如: Struts2 的 Action 就不是单例的! 可以通过 scope 属性来指定 bean 的作用域 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">prototype: 原型的. 每次调用 getBean 方法都会返回一个新的 bean. 且在第一次调用 getBean 方法时才创建实例</span></span><br><span class="line"><span class="comment">singleton: 单例的. 每次调用 getBean 方法都会返回同一个 bean. 且在 IOC 容器初始化时即创建 bean 的实例. 默认值 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao2"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Dao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Service"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"action"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.Action"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试 Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans-auto.xml"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试 bean 的作用域</span></span><br><span class="line">Dao dao1 = (Dao) ctx.getBean(<span class="string">"dao2"</span>);</span><br><span class="line">Dao dao2 = (Dao) ctx.getBean(<span class="string">"dao2"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(dao1 == dao2);<span class="comment">//false 非单例 Bean</span></span><br></pre></td></tr></table></figure><ul><li>WEB 环境作用域</li></ul><hr><h4 id="2-8、使用外部属性文件"><a href="#2-8、使用外部属性文件" class="headerlink" title="2-8、使用外部属性文件"></a>2-8、使用外部属性文件</h4><ul><li>在配置文件里配置 Bean 时, 有时需要在 Bean 的配置里混入系统部署的细节信息(例如: 文件路径, 数据源配置信息等). 而这些部署细节实际上需要和 Bean 配置相分离。</li><li>Spring 提供了一个 PropertyPlaceholderConfigurer 的 BeanFactory 后置处理器, 这个处理器允许用户将 Bean 配置的部分内容外移到属性文件中. 可以在 Bean 配置文件里使用形式为 ${var} 的变量, PropertyPlaceholderConfigurer 从属性文件里加载属性, 并使用这些属性来替换变量.</li><li>Spring 还允许在属性文件中使用 ${propName}，以实现属性之间的相互引用。</li><li>Spring 2.5 之后不要再配置 PropertyPlaceholderConfigurer 类，简化为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置数据源 --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot; value=&quot;$&#123;jdbc.initPoolSize&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><p>测试 Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans-auto.xml"</span>);</span><br><span class="line"><span class="comment">//测试使用外部属性文件</span></span><br><span class="line">DataSource dataSource = (DataSource) ctx.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line">System.out.println(dataSource.getConnection());</span><br></pre></td></tr></table></figure><hr><h4 id="2-9、SpEL（Spring-表达式语言）"><a href="#2-9、SpEL（Spring-表达式语言）" class="headerlink" title="2-9、SpEL（Spring 表达式语言）"></a>2-9、SpEL（Spring 表达式语言）</h4><ul><li><p>SpEL 简介</p><ul><li>Spring 表达式语言（简称SpEL）：是一个支持运行时查询和操作对象图的强大的表达式语言。</li><li>语法类似于 EL：SpEL 使用 #{…} 作为定界符，所有在大框号中的字符都将被认为是 SpEL。</li><li>SpEL 为 bean 的属性进行动态赋值提供了便利。</li><li>通过 SpEL 可以实现：    <ul><li>通过 bean 的 id 对 bean 进行引用。</li><li>调用方法以及引用对象中的属性。</li><li>计算表达式的值。</li><li>正则表达式的匹配。</li></ul></li></ul></li><li><p>SpEL：字面量</p></li></ul><p><img src="./images/1524558931460.jpg" alt="字面量的表示"></p><ul><li>SpEL：引用 Bean、属性和方法</li></ul><p><img src="./images/1524558965102.jpg" alt="引用 Bean、属性和方法"></p><ul><li>SpEL 支持的运算符号</li></ul><p><img src="./images/1524559205666.jpg" alt="支持的运算符号1"></p><p><img src="./images/1524559230954.jpg" alt="支持的运算符号2"></p><p>动态赋值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4、测试 SpEL: 可以为属性进行动态的赋值(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"周迅"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boy"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="comment">&lt;!--User 类中定义了init、destroy方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"高胜远"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wifeName"</span> <span class="attr">value</span>=<span class="string">"#&#123;girl.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试 main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans-auto.xml"</span>);</span><br><span class="line"><span class="comment">//测试 spEL</span></span><br><span class="line">User boy = (User) ctx.getBean(<span class="string">"boy"</span>);</span><br><span class="line">System.out.println(boy.getUserName() + <span class="string">":"</span> + boy.getWifeName());</span><br></pre></td></tr></table></figure><hr><h4 id="2-10、IOC-容器中-Bean-的生命周期"><a href="#2-10、IOC-容器中-Bean-的生命周期" class="headerlink" title="2-10、IOC 容器中 Bean 的生命周期"></a>2-10、IOC 容器中 Bean 的生命周期</h4><ul><li>1、Spring 配置 Bean 的后置通知</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5、配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.ref;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.helloworld.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法在 init 方法之后被调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object arg0, String arg1)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg1.equals(<span class="string">"boy"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"postProcessAfterInitialization..."</span> + arg0 + <span class="string">","</span> + arg1);</span><br><span class="line">User user = (User) arg0;</span><br><span class="line">user.setUserName(<span class="string">"李大齐"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arg0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法在 init 方法之前被调用</span></span><br><span class="line"><span class="comment">//可以工作返回的对象来决定最终返回给 getBean 方法的对象是哪一个, 属性值是什么</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg0: 实际要返回的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg1: bean 的 id 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object arg0, String arg1)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg1.equals(<span class="string">"boy"</span>))</span><br><span class="line">System.out.println(<span class="string">"postProcessBeforeInitialization..."</span> + arg0 + <span class="string">","</span> + arg1);</span><br><span class="line"><span class="keyword">return</span> arg0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 Main<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans-auto.xml"</span>);</span><br><span class="line"><span class="comment">//测试 spEL</span></span><br><span class="line">User boy = (User) ctx.getBean(<span class="string">"boy"</span>);</span><br><span class="line">System.out.println(boy.getUserName() + <span class="string">":"</span> + boy.getWifeName());</span><br></pre></td></tr></table></figure></p><ul><li>2、Spring IOC 容器对 Bean 的生命周期进行管理的过程:</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过构造器或工厂方法创建 <span class="keyword">Bean </span>实例。</span><br><span class="line">为 <span class="keyword">Bean </span>的属性设置值和对其他 <span class="keyword">Bean </span>的引用。</span><br><span class="line">将 <span class="keyword">Bean </span>实例传递给 <span class="keyword">Bean </span>后置处理器的 postProcessBeforeInitialization 方法。</span><br><span class="line">调用 <span class="keyword">Bean </span>的初始化方法。</span><br><span class="line">将 <span class="keyword">Bean </span>实例传递给 <span class="keyword">Bean </span>后置处理器的 postProcessAfterInitialization方法。</span><br><span class="line"><span class="keyword">Bean </span>可以使用了。</span><br><span class="line">当容器关闭时, 调用 <span class="keyword">Bean </span>的销毁方法。</span><br></pre></td></tr></table></figure><ul><li>3、工厂方法&amp;FactroyBean 方式配置 Bean</li></ul><p>beans-auto.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 6、通过工厂方法的方式来配置 bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 6-1. 通过静态工厂方法: 一个类中有一个静态方法, 可以返回一个类的实例(了解) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 class 中指定静态工厂方法的全类名, 在 factory-method 中指定静态工厂方法的方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.DateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"getDateInstance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span><span class="comment">&lt;!-- 可以通过 constructor-arg 子节点为静态工厂方法指定参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6-2. 实例工厂方法: 先需要创建工厂对象, 再调用工厂的非静态方法返回实例(了解) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ①. 创建工厂对应的 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ②. 有实例工厂方法来创建 bean 实例 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datetime"</span> <span class="attr">factory-bean</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"parse"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 constructor-arg 执行调用工厂方法需要传入的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1990-12-12 12:12:12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7、配置通过 FactroyBean 的方式来创建 bean 的实例(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.UserBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试 Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试工厂方法配置 Bean</span></span><br><span class="line"><span class="comment">//DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.FULL);</span></span><br><span class="line">DateFormat dateFormat = (DateFormat) ctx.getBean(<span class="string">"dateFormat"</span>);</span><br><span class="line">System.out.println(dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">Date date = (Date) ctx.getBean(<span class="string">"datetime"</span>);</span><br><span class="line">System.out.println(date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试通过 FactroyBean 来配置 Bean</span></span><br><span class="line">User user = (User) ctx.getBean(<span class="string">"user"</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line">ctx.close();</span><br></pre></td></tr></table></figure><hr><h4 id="2-11、Spring4-x-新特性-泛型依赖注入"><a href="#2-11、Spring4-x-新特性-泛型依赖注入" class="headerlink" title="2-11、Spring4.x 新特性 泛型依赖注入"></a>2-11、Spring4.x 新特性 泛型依赖注入</h4><p><img src="./images/1538277480322.png" alt="泛型依赖注入"></p><hr><h4 id="2-12、整合多个配置文件"><a href="#2-12、整合多个配置文件" class="headerlink" title="2-12、整合多个配置文件"></a>2-12、整合多个配置文件</h4><p><img src="./images/1538277658729.png" alt="整合多个配置文件"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;1、IOC-amp-DI-概述&quot;&gt;&lt;a href=&quot;#1、IOC-amp-DI-概述&quot; class=&quot;headerlink&quot; title=&quot;1、IOC&amp;amp;DI 概述&quot;&gt;&lt;/a&gt;1、IOC&amp;amp;DI 概述&lt;/h3&gt;&lt;h4 id=&quot;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-2--开发环境搭建</title>
    <link href="http://yoursite.com/2019/03/25/Spring-2--%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/03/25/Spring-2--开发环境搭建/</id>
    <published>2019-03-25T07:33:39.279Z</published>
    <updated>2019-03-24T23:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="1、Spring-框架的核心jar-包"><a href="#1、Spring-框架的核心jar-包" class="headerlink" title="1、Spring 框架的核心jar 包"></a>1、Spring 框架的核心jar 包</h3><p><img src="https://github.com/ppjuice/xiaoshujiangTC/raw/master/小书匠/1548137955928.png" alt="Spring框架jar 包"><br>除此之外，还有其他一些 jar 包。</p><hr><h3 id="2、Spring-的-HelloWorld"><a href="#2、Spring-的-HelloWorld" class="headerlink" title="2、Spring 的 HelloWorld"></a>2、Spring 的 HelloWorld</h3><ul><li>1、引入jar 包</li><li>2、编写 com.ppjuice.helloworld.HelloWorld 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppjuice.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is hello...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、配置 ApplicationContext .xml 文件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;1、Spring-框架的核心jar-包&quot;&gt;&lt;a href=&quot;#1、Spring-框架的核心jar-包&quot; class=&quot;headerlink&quot; title=&quot;1、Spring 框架的核心jar 包&quot;&gt;&lt;/a&gt;1、Spring 框架的核心ja
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-1--什么是Spring？</title>
    <link href="http://yoursite.com/2019/03/25/Spring-1--%E4%BB%80%E4%B9%88%E6%98%AFSpring%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/03/25/Spring-1--什么是Spring？/</id>
    <published>2019-03-25T07:33:39.277Z</published>
    <updated>2019-03-24T23:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="1、什么是-Spring？"><a href="#1、什么是-Spring？" class="headerlink" title="1、什么是 Spring？"></a>1、什么是 Spring？</h3><ul><li>Spring 是一个 IOC(DI) 和 AOP 容器框架，开源框架。</li><li>轻量级：Spring 是非侵入性的 - 基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API。</li><li>依赖注入(DI — dependency injection、IOC)。</li><li>面向切面编程(AOP — aspect oriented programming)。</li><li>容器: Spring 是一个容器, 因为它包含并且管理应用对象的生命周期。</li><li>框架: Spring 实现了使用简单的组件配置组合成一个复杂的应用. 在 Spring 中可以使用 XML 和 Java 注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库 （实际上 Spring 自身也提供了展现层的 SpringMVC 和 持久层的 Spring JDBC）。</li></ul><hr><h3 id="2、如何学好-Spring？"><a href="#2、如何学好-Spring？" class="headerlink" title="2、如何学好 Spring？"></a>2、如何学好 Spring？</h3><ul><li>Spring核心是IoC容器，所以一定要透彻理解什么是IoC容器，以及如何配置及使用容器，其他所有技术都是基于容器实现的；</li><li>理解好IoC后，接下来是面向切面编程，首先还是明确概念，基本配置，最后是实现原理。</li><li>接下来就是数据库事务管理，其实Spring管理事务是通过面向切面编程实现的，所以基础很重要，IoC容器和面向切面编程搞定后，其余都是基于这俩东西的实现。</li></ul><hr><h3 id="3、Spring-基础"><a href="#3、Spring-基础" class="headerlink" title="3、Spring 基础"></a>3、Spring 基础</h3><h4 id="3-1、Spring-架构图"><a href="#3-1、Spring-架构图" class="headerlink" title="3-1、Spring 架构图"></a>3-1、Spring 架构图</h4><p><img src="https://github.com/ppjuice/xiaoshujiangTC/raw/master/小书匠/1548130458018.png" alt="Spring架构图"></p><hr><h4 id="3-2、各架构模块介绍"><a href="#3-2、各架构模块介绍" class="headerlink" title="3-2、各架构模块介绍"></a>3-2、各架构模块介绍</h4><ul><li><strong>1、核心容器：包括Core、Beans、Context、EL模块。</strong><ul><li><strong>Core模块</strong>：封装了框架依赖的最底层部分，包括资源访问、类型转换及一些常用工具类。</li><li><strong>Beans模块</strong>：提供了框架的基础部分，包括反转控制和依赖注入。其中Bean Factory是容器核心，本质是“工厂设计模式”的实现，而且无需编程实现“单例设计模式”，单例完全由容器控制，而且提倡面向接口编程，而非面向实现编程；所有应用程序对象及对象间关系由框架管理，从而真正把你从程序逻辑中把维护对象之间的依赖关系提取出来，所有这些依赖关系都由BeanFactory来维护。</li><li><strong>Context模块</strong>：以Core和Beans为基础，集成Beans模块功能并添加资源绑定、数据验证、国际化、Java EE支持、容器生命周期、事件传播等；核心接口是ApplicationContext。</li><li><strong>EL模块</strong>：提供强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。</li></ul></li></ul><hr><ul><li><strong>2、AOP、Aspects模块</strong><ul><li><strong>AOP模块</strong>：Spring AOP模块提供了符合 AOP Alliance规范的面向方面的编程（aspect-oriented programming）实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中；这样各专其职，降低业务逻辑和通用功能的耦合。</li><li><strong>Aspects模块</strong>：提供了对AspectJ的集成，AspectJ提供了比Spring ASP更强大的功能。<br>数据访问/集成模块：该模块包括了JDBC、ORM、OXM、JMS和事务管理。</li></ul></li></ul><hr><ul><li><strong>3、data access/intergration 数据访问、数据整合模块</strong><ul><li><strong>事务模块</strong>：该模块用于Spring管理事务，只要是Spring管理对象都能得到Spring管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事物管理。</li><li><strong>JDBC模块</strong>：提供了一个JBDC的样例模板，使用这些模板能消除传统冗长的JDBC编码还有必须的事务控制，而且能享受到Spring管理事务的好处。</li><li><strong>ORM模块</strong>：提供与流行的“对象-关系”映射框架的无缝集成，包括Hibernate、JPA、Ibatiss等。而且可以使用Spring事务管理，无需额外控制事务。</li><li><strong>OXM模块</strong>：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li><li><strong>JMS模块</strong>：用于JMS(Java Messaging Service)，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li></ul></li></ul><hr><ul><li><strong>4、Web 模块</strong><ul><li><strong>Web/Remoting模块</strong>：Web/Remoting模块包含了Web、Web-Servlet、Web-Struts、Web-Porlet模块。</li><li><strong>Web模块</strong>：提供了基础的web功能。例如多文件上传、集成IoC容器、远程过程访问（RMI、Hessian、Burlap）以及Web Service支持，并提供一个RestTemplate类来提供方便的Restful services访问。</li><li><strong>Web-Servlet模块</strong>：提供了一个Spring MVC Web框架实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP标签，完全无缝与Spring其他技术协作。</li><li><strong>Web-Struts模块</strong>：提供了与Struts无缝集成，Struts1.x 和Struts2.x都支持。</li><li><strong>Test模块</strong>： Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;1、什么是-Spring？&quot;&gt;&lt;a href=&quot;#1、什么是-Spring？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是 Spring？&quot;&gt;&lt;/a&gt;1、什么是 Spring？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring 
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-4--AOP</title>
    <link href="http://yoursite.com/2019/03/25/Spring-4--AOP/"/>
    <id>http://yoursite.com/2019/03/25/Spring-4--AOP/</id>
    <published>2019-03-25T07:33:39.274Z</published>
    <updated>2019-03-24T23:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="1、为什么需要-AOP？"><a href="#1、为什么需要-AOP？" class="headerlink" title="1、为什么需要 AOP？"></a>1、为什么需要 AOP？</h3><p>需求案例：<br>需求1-日志：在程序执行期间追踪正在发生的活动。<br>需求2-验证：希望计算器只能处理正数的运算。</p><h4 id="1-1、不使用-AOP-时的代码实现。"><a href="#1-1、不使用-AOP-时的代码实现。" class="headerlink" title="1-1、不使用 AOP 时的代码实现。"></a>1-1、不使用 AOP 时的代码实现。</h4><p><img src="./images/1538277803976.png" alt="类图"></p><p><img src="./images/1538277857186.png" alt="代码实现"></p><p><img src="./images/1538277919624.png" alt="问题分析"></p><hr><h4 id="1-2、使用动态代理解决问题分析"><a href="#1-2、使用动态代理解决问题分析" class="headerlink" title="1-2、使用动态代理解决问题分析"></a>1-2、使用动态代理解决问题分析</h4><p><strong>代理设计模式的原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上。</strong></p><ul><li>0、接口实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticCalculatorImpl</span> <span class="keyword">implements</span> <span class="title">ArithmeticCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = i + j;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = i - j;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = i * j;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = i / j;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1、新建处理日志的代理类 ArithmeticCalculatorLoggingProxy，将原始对象包装起来。（<strong>匿名内部类的方式实现</strong>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticCalculatorLoggingProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要代理的对象</span></span><br><span class="line"><span class="keyword">private</span> ArithmeticCalculator target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArithmeticCalculatorLoggingProxy</span><span class="params">(ArithmeticCalculator target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArithmeticCalculator <span class="title">getLoggingProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">ArithmeticCalculator proxy = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">ClassLoader loader = target.getClass().getClassLoader();</span><br><span class="line">Class [] interfaces = <span class="keyword">new</span> Class[]&#123;ArithmeticCalculator.class&#125;;</span><br><span class="line">InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * proxy: 代理对象。 一般不使用该对象</span></span><br><span class="line"><span class="comment"> * method: 正在被调用的方法</span></span><br><span class="line"><span class="comment"> * args: 调用方法传入的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">String methodName = method.getName();</span><br><span class="line"><span class="comment">//打印日志</span></span><br><span class="line">System.out.println(<span class="string">"[before] The method "</span> + methodName + <span class="string">" begins with "</span> + Arrays.asList(args));</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用目标方法</span></span><br><span class="line">Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line">result = method.invoke(target, args);</span><br><span class="line"><span class="comment">//返回通知, 可以访问到方法的返回值</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//异常通知, 可以访问到方法出现的异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置通知. 因为方法可以能会出异常, 所以访问不到方法的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印日志</span></span><br><span class="line">System.out.println(<span class="string">"[after] The method ends with "</span> + result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * loader: 代理对象使用的类加载器。 </span></span><br><span class="line"><span class="comment"> * interfaces: 指定代理对象的类型. 即代理代理对象中可以有哪些方法. </span></span><br><span class="line"><span class="comment"> * h: 当具体调用代理对象的方法时, 应该如何进行响应, 实际上就是调用 InvocationHandler 的 invoke 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">proxy = (ArithmeticCalculator) Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（<strong>实现 InvocationHandler 接口的方式实现（推荐）</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理类的实现：InvocationHandler接口（invoke方法）+Proxy类（newProxyInstance方法）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticCalculatorLoggingProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要代理的对象</span></span><br><span class="line">    <span class="keyword">private</span> ArithmeticCalculator target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArithmeticCalculatorLoggingProxy</span><span class="params">(ArithmeticCalculator target)</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArithmeticCalculator <span class="title">getLoggingProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArithmeticCalculator proxy = <span class="keyword">null</span>;</span><br><span class="line">        ClassLoader loader = target.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = <span class="keyword">new</span> Class[]&#123;ArithmeticCalculator.class&#125;;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy 类：</span></span><br><span class="line"><span class="comment">         * loader: 代理对象使用的类加载器。</span></span><br><span class="line"><span class="comment">         * interfaces: 指定被代理对象的一组接口. 即被代理对象实现了哪些接口。指定后该代理对象实例就会实现被代理对象接口的所有方法。</span></span><br><span class="line"><span class="comment">         * h: 当具体调用代理对象的方法时, 应该如何进行响应, 实际上就是调用 InvocationHandler 的 invoke 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        proxy = (ArithmeticCalculator) Proxy.newProxyInstance(loader, interfaces, <span class="keyword">new</span> ArithmeticCalculatorLoggingProxy(target));<span class="comment">//h:参数，该类实现了此接口有继承关系。</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"代理对象实例："</span>+proxy.getClass().getName());<span class="comment">//代理对象实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * proxy: 代理对象。 一般不使用该对象</span></span><br><span class="line"><span class="comment">     * method: 正在被调用的方法</span></span><br><span class="line"><span class="comment">     * args: 调用方法传入的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">//打印日志</span></span><br><span class="line">        System.out.println(<span class="string">"[before] The method "</span> + methodName + <span class="string">" begins with "</span> + Arrays.asList(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用目标方法</span></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//前置通知</span></span><br><span class="line">            result = method.invoke(target, args);<span class="comment">//返回通知, 可以访问到方法的返回值</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//异常通知, 可以访问到方法出现的异常</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后置通知. 因为方法可以能会出异常, 所以访问不到方法的返回值</span></span><br><span class="line">        <span class="comment">//打印日志</span></span><br><span class="line">        System.out.println(<span class="string">"[after] The method ends with "</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="1-3、动态代理原理分析"><a href="#1-3、动态代理原理分析" class="headerlink" title="1-3、动态代理原理分析"></a>1-3、动态代理原理分析</h4><ul><li>1、Java 动态代理创建出来的动态代理类。<br><strong>上面我们利用Proxy类的newProxyInstance方法创建了一个动态代理对象，查看该方法的源码，发现它只是封装了创建动态代理类的步骤(红色标准部分)：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实，我们最应该关注的是 Class&lt;?&gt; cl = getProxyClass0(loader, intfs);这句，这里产生了代理类，后面代码中的构造器也是通过这里产生的类来获得，可以看出，这个类的产生就是整个动态代理的关键，由于是动态生成的类文件，我这里不具体进入分析如何产生的这个类文件，只需要知道这个类文件时缓存在java虚拟机中的，我们可以通过下面的方法将其打印到文件里面，一睹真容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateProxyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class="string">"$Proxy4"</span>, ArithmeticCalculatorImpl.class.getInterfaces());</span><br><span class="line">       String path = <span class="string">"E:\\PersonWorkSpace\\JavaEESpace\\spring-2\\src\\com\\atguigu\\spring\\dynamicProxy\\ArithmeticCalculatorImpl.class"</span>;</span><br><span class="line">       <span class="keyword">try</span>(FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path)) &#123;</span><br><span class="line">           fos.write(classFile);</span><br><span class="line">           fos.flush();</span><br><span class="line">           System.out.println(<span class="string">"代理类class文件写入成功"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           System.out.println(<span class="string">"写文件错误"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对这个class文件进行反编译，我们看看jdk为我们生成了什么样的内容：<br><strong>生成的代理类 实现了被代理类的接口。代理类调用接口方法时，会利用反射转发到invoke 去调用方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy4</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ArithmeticCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy4(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);<span class="comment">//该代理类调用方法时转发到 invoke 方法反射调用。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m6 = Class.forName(<span class="string">"com.atguigu.spring.dynamicProxy.ArithmeticCalculator"</span>).getMethod(<span class="string">"mul"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.atguigu.spring.dynamicProxy.ArithmeticCalculator"</span>).getMethod(<span class="string">"add"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m5 = Class.forName(<span class="string">"com.atguigu.spring.dynamicProxy.ArithmeticCalculator"</span>).getMethod(<span class="string">"sub"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m4 = Class.forName(<span class="string">"com.atguigu.spring.dynamicProxy.ArithmeticCalculator"</span>).getMethod(<span class="string">"div"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考博客：<br><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html。" target="_blank" rel="noopener">https://www.cnblogs.com/gonjan-blog/p/6685611.html。</a><br><a href="http://www.cnblogs.com/xiaoluo501395377/p/3383130.html。" target="_blank" rel="noopener">http://www.cnblogs.com/xiaoluo501395377/p/3383130.html。</a></p><hr><h4 id="1-4、总结"><a href="#1-4、总结" class="headerlink" title="1-4、总结"></a>1-4、总结</h4><p>生成的代理类：$Proxy0 extends Proxy implements Person，我们看到代理类继承了Proxy类，所以也就决定了java动态代理只能对接口进行代理，Java的继承机制注定了这些动态代理类们无法实现对class的动态代理。<br>上面的动态代理的例子，其实就是AOP的一个简单实现了，在目标对象的方法执行之前和执行之后进行了处理，对方法耗时统计。Spring的AOP实现其实也是用了Proxy和InvocationHandler这两个东西的。</p><hr><hr><h3 id="2、AOP-简介"><a href="#2、AOP-简介" class="headerlink" title="2、AOP 简介"></a>2、AOP 简介</h3><ul><li>1、AOP(Aspect-Oriented Programming, 面向切面编程)。</li><li>2、AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点。</li><li>3、在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里。</li><li>4、AOP 的好处:<br>每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级<br>业务模块更简洁, 只包含核心业务代码</li></ul><hr><hr><h3 id="3、AOP-术语"><a href="#3、AOP-术语" class="headerlink" title="3、AOP 术语"></a>3、AOP 术语</h3><h4 id="3-1、切面-Aspect"><a href="#3-1、切面-Aspect" class="headerlink" title="3-1、切面(Aspect)"></a>3-1、切面(Aspect)</h4><p>切面就是横切面，代表的是一个普遍存在的共有功能。例如，日志、验证、统计成员方法运行时间。都可作为一个切面来处理。<br>例：代理对象$proxy0 已经将日志切面与业务逻辑add 方法进行了合成。（先调invoke 打印日志，再反射调用 add 方法。）</p><h4 id="3-2、通知-Advice"><a href="#3-2、通知-Advice" class="headerlink" title="3-2、通知 (Advice)"></a>3-2、通知 (Advice)</h4><p>切面要完成的工作，例如：日志切面要完成打印日志的任务，则通知即是打印日志。前置通知在 add 方法反射执行前打印日志，后置通知在 add 方法反射执行后打印通知。</p><ul><li>五种类型的通知注解<br>@Before: 前置通知, 在方法执行之前执行。<br>@After: 后置通知, 在方法执行之后执行 。<br>@AfterRunning: 返回通知, 在方法返回结果之后执行。<br>@AfterThrowing: 异常通知, 在方法抛出异常之后。<br>@Around: 环绕通知, 围绕着方法执行。</li></ul><h4 id="3-3、目标-Target"><a href="#3-3、目标-Target" class="headerlink" title="3-3、目标 (Target)"></a>3-3、目标 (Target)</h4><h4 id="3-4、代理-Proxy"><a href="#3-4、代理-Proxy" class="headerlink" title="3-4、代理 (Proxy)"></a>3-4、代理 (Proxy)</h4><h4 id="3-5、连接点（Joinpoint）"><a href="#3-5、连接点（Joinpoint）" class="headerlink" title="3-5、连接点（Joinpoint）"></a>3-5、连接点（Joinpoint）</h4><p>程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。<br>例如 ArithmethicCalculator#add()方法。</p><h4 id="3-6、切点（pointcut）"><a href="#3-6、切点（pointcut）" class="headerlink" title="3-6、切点（pointcut）"></a>3-6、切点（pointcut）</h4><p>每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点。<br>AOP 通过切点定位到特定的连接点。切点即指类和方法。AOP 使用类和方法作为连接点的查询条件。定位连接点。</p><hr><h3 id="4、在Spring-中启用-AspectJ-AOP框架。"><a href="#4、在Spring-中启用-AspectJ-AOP框架。" class="headerlink" title="4、在Spring 中启用 AspectJ AOP框架。"></a>4、在Spring 中启用 AspectJ AOP框架。</h3><ul><li>1、要在 Spring 应用中使用 AspectJ 注解, 必须在 classpath 下包含 AspectJ 类库: aopalliance.jar、aspectj.weaver.jar 和 spring-aspects.jar</li><li>2、将 aop Schema 添加到 <beans> 根元素中.</beans></li><li>3、要在 Spring IOC 容器中启用 AspectJ 注解支持, 只要在 Bean 配置文件中定义一个空的 XML 元素 &lt; aop:aspectj-autoproxy &gt;</li><li>4、当 Spring IOC 容器侦测到 Bean 配置文件中的 &lt; aop:aspectj-autoproxy&gt; 元素时, 会自动为与 AspectJ 切面匹配的 Bean 创建代理。</li></ul><hr><h4 id="4-1、用-AspectJ-注解声明切面"><a href="#4-1、用-AspectJ-注解声明切面" class="headerlink" title="4-1、用 AspectJ 注解声明切面"></a>4-1、用 AspectJ 注解声明切面</h4><ul><li>1、要在 Spring 中声明 AspectJ 切面, 只需要在 IOC 容器中将切面声明为 Bean 实例. 当在 Spring IOC 容器中初始化 AspectJ 切面之后, Spring IOC 容器就会为那些与 AspectJ 切面相匹配的 Bean 创建代理.。</li><li>2、在 AspectJ 注解中, 切面只是一个带有 @Aspect 注解的 Java 类. 。</li><li>3、通知是标注有某种注解的简单的 Java 方法.。</li><li>4、AspectJ 支持 5 种类型的通知注解:<br>@Before: 前置通知, 在方法执行之前执行。<br>@After: 后置通知, 在方法执行之后执行 。<br>@AfterRunning: 返回通知, 在方法返回结果之后执行。<br>@AfterThrowing: 异常通知, 在方法抛出异常之后。<br>@Around: 环绕通知, 围绕着方法执行。</li></ul><hr><h4 id="4-2、前置通知"><a href="#4-2、前置通知" class="headerlink" title="4-2、前置通知"></a>4-2、前置通知</h4><p><img src="./images/1538978056433.png" alt="前置通知"><br><strong>利用方法签名编写 AspectJ 切入点表达式</strong></p><p><img src="./images/1538978255396.png" alt="切点表达式"></p><ul><li>方法签名：方法签名由方法名称和一个参数列表（方法的参数的顺序和类型）组成；注意，方法签名不包括方法的返回类型。不包括返回值和访问修饰符</li><li>切点表达式：</li><li>合并切点表达式</li></ul><p><img src="./images/1538980910789.png" alt="合并切点表达式"></p><ul><li>让通知访问当前连接点的细节</li></ul><p><img src="./images/1538981291550.png" alt="通知访问连接点的细节"></p><hr><h4 id="4-3、后置通知"><a href="#4-3、后置通知" class="headerlink" title="4-3、后置通知"></a>4-3、后置通知</h4><p><img src="./images/1538981409833.png" alt="后置通知"></p><hr><h4 id="4-4、返回通知"><a href="#4-4、返回通知" class="headerlink" title="4-4、返回通知"></a>4-4、返回通知</h4><p><img src="./images/1538981468737.png" alt="返回通知"></p><ul><li>返回通知中访问连接点的返回值</li></ul><p><img src="./images/1538981594820.png" alt="返回通知访问连接点的返回值"></p><hr><h4 id="4-5、异常通知"><a href="#4-5、异常通知" class="headerlink" title="4-5、异常通知"></a>4-5、异常通知</h4><p><img src="./images/1538981789292.png" alt="异常通知"></p><hr><h4 id="4-6、环绕通知"><a href="#4-6、环绕通知" class="headerlink" title="4-6、环绕通知"></a>4-6、环绕通知</h4><p><img src="./images/1538982501979.png" alt="环绕通知"></p><p><img src="./images/1538982552387.png" alt="环绕通知示例"></p><hr><h4 id="4-7、指定切面的优先级"><a href="#4-7、指定切面的优先级" class="headerlink" title="4-7、指定切面的优先级"></a>4-7、指定切面的优先级</h4><p><img src="./images/1538983646927.png" alt="指定切面优先级"></p><hr><h4 id="4-8、重用切入点定义"><a href="#4-8、重用切入点定义" class="headerlink" title="4-8、重用切入点定义"></a>4-8、重用切入点定义</h4><p>见 合并切入点</p><p><img src="./images/1538983914638.png" alt="重用切入点"></p><p><img src="./images/1538983930694.png" alt="示例"></p><hr><h4 id="4-9、引入通知"><a href="#4-9、引入通知" class="headerlink" title="4-9、引入通知"></a>4-9、引入通知</h4><p><strong>引入通知是一种特殊的通知类型. 它通过为接口提供实现类, 允许对象动态地实现接口, 就像对象已经在运行时扩展了实现类一样</strong></p><h4 id="4-10、用XML-声明切面、切点、通知（包括引入通知）"><a href="#4-10、用XML-声明切面、切点、通知（包括引入通知）" class="headerlink" title="4-10、用XML 声明切面、切点、通知（包括引入通知）"></a>4-10、用XML 声明切面、切点、通知（包括引入通知）</h4><hr><h3 id="5、Spring-对JDBC-的支持"><a href="#5、Spring-对JDBC-的支持" class="headerlink" title="5、Spring 对JDBC 的支持"></a>5、Spring 对JDBC 的支持</h3><h4 id="5-1、Spring-xml-中配置-JDBC-模板类和-c3p0-数据源"><a href="#5-1、Spring-xml-中配置-JDBC-模板类和-c3p0-数据源" class="headerlink" title="5-1、Spring xml 中配置 JDBC 模板类和 c3p0 数据源"></a>5-1、Spring xml 中配置 JDBC 模板类和 c3p0 数据源</h4><p>org.springframework.jdbc.core.JdbcTemplate</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.atguigu.spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 C3P0 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.initPoolSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.maxPoolSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 Spirng 的 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2、jdbcTemplate-模板方法测试"><a href="#5-2、jdbcTemplate-模板方法测试" class="headerlink" title="5-2、jdbcTemplate 模板方法测试"></a>5-2、jdbcTemplate 模板方法测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext ctx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"><span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">jdbcTemplate = (JdbcTemplate) ctx.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">employeeDao = ctx.getBean(EmployeeDao.class);</span><br><span class="line">departmentDao = ctx.getBean(DepartmentDao.class);</span><br><span class="line">namedParameterJdbcTemplate = ctx.getBean(NamedParameterJdbcTemplate.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取单个列的值, 或做统计查询</span></span><br><span class="line"><span class="comment"> * 使用 queryForObject(String sql, Class&lt;Long&gt; requiredType) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryForObject2</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT count(id) FROM employees"</span>;</span><br><span class="line"><span class="keyword">long</span> count = jdbcTemplate.queryForObject(sql, Long.class);</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查到实体类的集合</span></span><br><span class="line"><span class="comment"> * 注意调用的不是 queryForList 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryForList</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT id, last_name lastName, email FROM employees WHERE id &gt; ?"</span>;</span><br><span class="line">RowMapper&lt;Employee&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class);</span><br><span class="line">List&lt;Employee&gt; employees = jdbcTemplate.query(sql, rowMapper,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(employees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中获取一条记录, 实际得到对应的一个对象</span></span><br><span class="line"><span class="comment"> * 注意不是调用 queryForObject(String sql, Class&lt;Employee&gt; requiredType, Object... args) 方法!</span></span><br><span class="line"><span class="comment"> * 而需要调用 queryForObject(String sql, RowMapper&lt;Employee&gt; rowMapper, Object... args)</span></span><br><span class="line"><span class="comment"> * 1. 其中的 RowMapper 指定如何去映射结果集的行, 常用的实现类为 BeanPropertyRowMapper</span></span><br><span class="line"><span class="comment"> * 2. 使用 SQL 中列的别名完成列名和类的属性名的映射. 例如 last_name lastName</span></span><br><span class="line"><span class="comment"> * 3. 不支持级联属性. JdbcTemplate 到底是一个 JDBC 的小工具, 而不是 ORM 框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryForObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT id, last_name lastName, email, dept_id as \"department.id\" FROM employees WHERE id = ?"</span>;</span><br><span class="line">RowMapper&lt;Employee&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class);</span><br><span class="line">Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行批量更新: 批量的 INSERT, UPDATE, DELETE</span></span><br><span class="line"><span class="comment"> * 最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个 Object 的数组, 那么多条不就需要多个 Object 的数组吗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO employees(last_name, email, dept_id) VALUES(?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">batchArgs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"AA"</span>, <span class="string">"aa@atguigu.com"</span>, <span class="number">1</span>&#125;);</span><br><span class="line">batchArgs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"BB"</span>, <span class="string">"bb@atguigu.com"</span>, <span class="number">2</span>&#125;);</span><br><span class="line">batchArgs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"CC"</span>, <span class="string">"cc@atguigu.com"</span>, <span class="number">3</span>&#125;);</span><br><span class="line">batchArgs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"DD"</span>, <span class="string">"dd@atguigu.com"</span>, <span class="number">3</span>&#125;);</span><br><span class="line">batchArgs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"EE"</span>, <span class="string">"ee@atguigu.com"</span>, <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 INSERT, UPDATE, DELETE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"UPDATE employees SET last_name = ? WHERE id = ?"</span>;</span><br><span class="line">jdbcTemplate.update(sql, <span class="string">"Jack"</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">DataSource dataSource = ctx.getBean(DataSource.class);</span><br><span class="line">System.out.println(dataSource.getConnection());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、NamedParameterJdbcTemplate-具名参数模板类。"><a href="#5-3、NamedParameterJdbcTemplate-具名参数模板类。" class="headerlink" title="5-3、NamedParameterJdbcTemplate 具名参数模板类。"></a>5-3、NamedParameterJdbcTemplate 具名参数模板类。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 NamedParameterJdbcTemplate, 该对象可以使用具名参数, 其没有无参数的构造器, 所以必须为其构造器指定参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"namedParameterJdbcTemplate"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作</span></span><br><span class="line"><span class="comment"> * 1. SQL 语句中的参数名和类的属性一致!</span></span><br><span class="line"><span class="comment"> * 2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNamedParameterJdbcTemplate2</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO employees(last_name, email, dept_id) "</span></span><br><span class="line">+ <span class="string">"VALUES(:lastName,:email,:dpetId)"</span>;</span><br><span class="line"></span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.setLastName(<span class="string">"XYZ"</span>);</span><br><span class="line">employee.setEmail(<span class="string">"xyz@sina.com"</span>);</span><br><span class="line">employee.setDpetId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">SqlParameterSource paramSource = <span class="keyword">new</span> BeanPropertySqlParameterSource(employee);</span><br><span class="line">namedParameterJdbcTemplate.update(sql, paramSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以为参数起名字. </span></span><br><span class="line"><span class="comment"> * 1. 好处: 若有多个参数, 则不用再去对应位置, 直接对应参数名, 便于维护</span></span><br><span class="line"><span class="comment"> * 2. 缺点: 较为麻烦. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNamedParameterJdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO employees(last_name, email, dept_id) VALUES(:ln,:email,:deptid)"</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">paramMap.put(<span class="string">"ln"</span>, <span class="string">"FF"</span>);</span><br><span class="line">paramMap.put(<span class="string">"email"</span>, <span class="string">"ff@atguigu.com"</span>);</span><br><span class="line">paramMap.put(<span class="string">"deptid"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">namedParameterJdbcTemplate.update(sql, paramMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6、Spring-对事务的管理"><a href="#6、Spring-对事务的管理" class="headerlink" title="6、Spring 对事务的管理"></a>6、Spring 对事务的管理</h3><h4 id="6-1、声明式事务"><a href="#6-1、声明式事务" class="headerlink" title="6-1、声明式事务"></a>6-1、声明式事务</h4><ul><li>1、编程式事务管理<br>将事务管理代码嵌入到业务方法中来控制事务的提交和回滚。（正常方式）</li></ul><p>-2、声明式事务管理<br>将事务管理代码从业务方法中分离出来, 以声明的方式来实现事务管理。Spring 通过 Spring AOP 框架支持声明式事务管理。通过使用注解+配置事务管理器。</p><hr><h4 id="6-2、事务的传播行为"><a href="#6-2、事务的传播行为" class="headerlink" title="6-2、事务的传播行为"></a>6-2、事务的传播行为</h4><h4 id="6-3、事务的隔离级别"><a href="#6-3、事务的隔离级别" class="headerlink" title="6-3、事务的隔离级别"></a>6-3、事务的隔离级别</h4><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;1、为什么需要-AOP？&quot;&gt;&lt;a href=&quot;#1、为什么需要-AOP？&quot; class=&quot;headerlink&quot; title=&quot;1、为什么需要 AOP？&quot;&gt;&lt;/a&gt;1、为什么需要 AOP？&lt;/h3&gt;&lt;p&gt;需求案例：&lt;br&gt;需求1-日志：在
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub page 搭建个人博客</title>
    <link href="http://yoursite.com/2019/03/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo+%20github%20page%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/03/25/如何使用Hexo+ github page搭建博客？/</id>
    <published>2019-03-25T04:12:59.560Z</published>
    <updated>2019-03-25T05:43:23.033Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><p>1、如何使用 github 搭建博客？<br>参考链接：</p><ul><li><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">https://www.cnblogs.com/jackyroc/p/7681938.html</a></li></ul></li><li><p>2、hexo 本地目录各文件以及文件夹的作用？</p><pre><code>主要看 _config.yml 文件。</code></pre></li><li>3、假如自己有多台设备，如何同步管理博客？<br> 参考链接： <ul><li><a href="https://juejin.im/post/5acf22e6f265da23994eeac9" target="_blank" rel="noopener">https://juejin.im/post/5acf22e6f265da23994eeac9</a></li></ul></li><li>4、hexo next 主题 Hexo-NexT配置超炫网页效果<pre><code>参考链接：</code></pre><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html</a></li><li><a href="https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-0</a></li></ul></li><li>5、hexo 如何发布文章？<ul><li><a href="https://www.jianshu.com/p/265b2c653e6f" target="_blank" rel="noopener">https://www.jianshu.com/p/265b2c653e6f</a></li><li><a href="https://www.zengyilun.com/HexoEditor/" target="_blank" rel="noopener">https://www.zengyilun.com/HexoEditor/</a></li><li><a href="https://www.cnblogs.com/xingyunblog/p/8681205.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingyunblog/p/8681205.html</a></li></ul></li><li><p>6、个人定制？</p><pre><code>主题推荐：</code></pre><ul><li><a href="https://blog.csdn.net/qincidong/article/details/82415271" target="_blank" rel="noopener">https://blog.csdn.net/qincidong/article/details/82415271</a></li><li><a href="http://tengj.top/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">http://tengj.top/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/</a></li><li><a href="https://www.titanjun.top/" target="_blank" rel="noopener">https://www.titanjun.top/</a></li><li><p><a href="https://www.haomwei.com/" target="_blank" rel="noopener">https://www.haomwei.com/</a></p><p>主题的配置文件修改后可热部署，Hexo 的配置文件不可。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、如何使用 github 搭建博客？&lt;br&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/jackyroc/p/7681938.html&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>第3章-线性表</title>
    <link href="http://yoursite.com/2019/03/25/%E7%AC%AC3%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/03/25/第3章-线性表/</id>
    <published>2019-03-25T02:51:43.036Z</published>
    <updated>2019-03-24T18:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p><img src="https://i.loli.net/2019/03/25/5c983b29bd6f0.jpg" alt="线性表"></p><h3 id="1、线性表定义"><a href="#1、线性表定义" class="headerlink" title="1、线性表定义"></a>1、线性表定义</h3><p>零个或多个数据元素的有限序列。</p><p>1、第一元素无前驱、最后一个元素无后继。<br>2、每个元素有且仅有一个前驱、后继。<br>3、相同数据元素。</p><hr><h3 id="2、线性表的抽象数据类型"><a href="#2、线性表的抽象数据类型" class="headerlink" title="2、线性表的抽象数据类型"></a>2、线性表的抽象数据类型</h3><hr><h3 id="3、线性表的顺序存储结构（数组实现）"><a href="#3、线性表的顺序存储结构（数组实现）" class="headerlink" title="3、线性表的顺序存储结构（数组实现）"></a>3、线性表的顺序存储结构（数组实现）</h3><p>线性表的两种物理存储结构（顺序存储结构、链式存储结构）</p><ul><li>1、顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。</li><li><p>2、插入</p></li><li><p>3、删除</p></li></ul><p>优点：<br>可以快速存取表中的任意元素值。<br>无需为表示表中元素之间的逻辑关系而增加额外的存储空间。</p><p>缺点：<br>插入和删除操作需要移动大量元素；<br>线性表长度发生变化时，难以确定存储长度。<br>造成存储空间的碎片。</p><hr><h3 id="4、线性表的链式存储结构"><a href="#4、线性表的链式存储结构" class="headerlink" title="4、线性表的链式存储结构"></a>4、线性表的链式存储结构</h3><p>链式存储结构：</p><h4 id="4-1、单链表"><a href="#4-1、单链表" class="headerlink" title="4-1、单链表"></a>4-1、单链表</h4><ul><li>1、为什么使用单链表？<br>数组实现的顺序存储在插入和删除操作时需要移动大量的元素，且存储空间的容量难以确定。</li><li>2、单链表的插入、删除、修改、查找<br>实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStruct.singleLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线性表（链表）--节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pengguozhen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年4月2日 上午11:41:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node head;<span class="comment">// 指向链表头节点的引用变量</span></span><br><span class="line"><span class="keyword">private</span> Node tail;<span class="comment">// 指向链表尾节点的引用变量</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">// 链表中当前总节点数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;<span class="comment">// 生成链表对象是一个空表</span></span><br><span class="line">head = <span class="keyword">null</span>;</span><br><span class="line">tail = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;<span class="comment">// 返回链表的长度</span></span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>查询--指定位置的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;<span class="comment">// 1、获取指定位置的元素</span></span><br><span class="line"><span class="keyword">return</span> findNodeByIndex(index).data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">findNodeByIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;<span class="comment">// 查找 指定索引位置的节点</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"线性表索引越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span> &amp;&amp; head.next == <span class="keyword">null</span>) &#123;<span class="comment">// 如果要插入位置的前一个节点为头结点并且头结点的next 域为null，直接返回头结点。</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">Node current = head;<span class="comment">// 从头节点开始下移遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp; current.next != <span class="keyword">null</span>; i++, current = current.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == index) &#123;</span><br><span class="line"><span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>查询--指定元素的位置(查找数据域存放的是element的节点位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findIndexByElement</span><span class="params">(T element)</span> </span>&#123;<span class="comment">// 2、查找 指定元素的位置(查找数据域存放的是element的节点位置)</span></span><br><span class="line">Node current = head;<span class="comment">// 从第一个节点开始查找对比数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp; current.next != <span class="keyword">null</span>; i++, current = current.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (current.data.equals(element))</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>插入--在指定位置之前插入一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * 在java中有这么一条规则，声明在方法中的变量在使用时必须要初始化;全局变量如果不赋值会有默认值。</span></span><br><span class="line"><span class="comment"> * 例如：int size; 本例中 size 的初始值为 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T element)</span> </span>&#123;<span class="comment">// 插入 在指定索引位置插入一个元素</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"线性表索引越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>)<span class="comment">// 如果链表为空，直接调用add方法</span></span><br><span class="line">&#123;</span><br><span class="line">add(element);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="comment">// 链表不为空时</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)<span class="comment">// 在链表头插入</span></span><br><span class="line">&#123;</span><br><span class="line">addAtHead(element);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Node prev = findNodeByIndex(index - <span class="number">1</span>);<span class="comment">// 找到要插入位置的前一个节点</span></span><br><span class="line">prev.next = <span class="keyword">new</span> Node(element, prev.next);<span class="comment">// 插入后prev的next指向新节点，新节点的next指向原来prev的下一个节点</span></span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 尾插法 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;<span class="comment">// 插入 尾插法在每次在链表尾添加新节点</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node(element, <span class="keyword">null</span>);</span><br><span class="line">tail = head;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(element, <span class="keyword">null</span>);</span><br><span class="line">tail.next = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头插法 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(T element)</span> </span>&#123; <span class="comment">// 插入 头插法在链表头部加入新节点</span></span><br><span class="line"><span class="comment">// 在头部插入新节点，就是让新节点的next指向原来的head,让新节点作为链表的头节点</span></span><br><span class="line">head = <span class="keyword">new</span> Node(element, head);</span><br><span class="line"><span class="comment">// newNode.next = head;</span></span><br><span class="line"><span class="comment">// head = newNode;</span></span><br><span class="line"><span class="comment">// 如果插入之前是空链表</span></span><br><span class="line"><span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line">tail = head;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>删除--指定位置的节点 并返回删除节点中的元素值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">Node deleteNode = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"线性表索引越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)<span class="comment">// 删除头节点</span></span><br><span class="line">&#123;</span><br><span class="line">deleteNode = head;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Node prev = findNodeByIndex(index - <span class="number">1</span>);<span class="comment">// 获取要删除的节点的前一个节点</span></span><br><span class="line">deleteNode = prev.next;<span class="comment">// 要删除的节点就是prev的next指向的节点</span></span><br><span class="line">prev.next = deleteNode.next;<span class="comment">// 删除以后prev的next指向被删除节点之前所指向的next</span></span><br><span class="line"></span><br><span class="line">deleteNode.next = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> deleteNode.data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>删除--链表中最后一个元素  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> delete(size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>清除链表中所有的元素  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">head = <span class="keyword">null</span>;</span><br><span class="line">tail = <span class="keyword">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表的输出 重写toString方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);<span class="comment">// 使用StringBuilder类</span></span><br><span class="line"><span class="keyword">for</span> (Node current = head; current != <span class="keyword">null</span>; current = current.next)<span class="comment">// 从head开始遍历</span></span><br><span class="line">&#123;</span><br><span class="line">sb.append(current.data.toString() + <span class="string">","</span>);<span class="comment">// 把节点的数据拼接起来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = sb.length();</span><br><span class="line"><span class="keyword">return</span> sb.delete(len - <span class="number">1</span>, len).append(<span class="string">"]"</span>).toString();<span class="comment">// 把最后一个元素的，删除然后加上]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>判断链表是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">TODO:</span>内部节点类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pengguozhen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年4月2日 下午12:10:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>// 节点类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> T data;<span class="comment">// 数据项</span></span><br><span class="line"><span class="keyword">private</span> Node next;<span class="comment">// 引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;<span class="comment">// 空参构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data, Node next)</span> </span>&#123;<span class="comment">// 初始化节点信息</span></span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dataStruct.singleLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="string">"aa"</span>);<span class="comment">// 链表头插入</span></span><br><span class="line">list.addAtHead(<span class="string">"cc"</span>);<span class="comment">// 链表尾插入</span></span><br><span class="line">list.insert(<span class="number">2</span>, <span class="string">"bb"</span>);<span class="comment">// 在指定任意位置插入</span></span><br><span class="line">System.out.println(list.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-2、静态链表"><a href="#4-2、静态链表" class="headerlink" title="4-2、静态链表"></a>4-2、静态链表</h4><ul><li>1、为什么使用静态链表？<br>为没有指针（引用）的编程语言提供链式存储结构实现的思想。</li></ul><h4 id="4-3、循环链表"><a href="#4-3、循环链表" class="headerlink" title="4-3、循环链表"></a>4-3、循环链表</h4><h4 id="4-4、双向链表"><a href="#4-4、双向链表" class="headerlink" title="4-4、双向链表"></a>4-4、双向链表</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/25/5c983b29bd6f0.jpg&quot; alt=&quot;线性表&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、线性表定义&quot;&gt;&lt;a href=&quot;#1、线性表定义&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>第2章-算法</title>
    <link href="http://yoursite.com/2019/03/25/%E7%AC%AC2%E7%AB%A0-%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/25/第2章-算法/</id>
    <published>2019-03-25T02:51:43.028Z</published>
    <updated>2019-03-24T18:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>摘自大话数据结构</p><h3 id="1、算法和数据结构的关系"><a href="#1、算法和数据结构的关系" class="headerlink" title="1、算法和数据结构的关系"></a>1、算法和数据结构的关系</h3><ul><li>重要的数据结构就那么几种、只有配合上算法才能学习到数据结构的用处。</li><li>算法：解决特定问题的步骤描述，在计算机中表现为指令的有限序列，每个指令代表一种操作。</li></ul><hr><h3 id="2、算法的特性"><a href="#2、算法的特性" class="headerlink" title="2、算法的特性"></a>2、算法的特性</h3><ul><li><p>输入、输出<br>算法具有零个或多个输入、至少有一个输出。算法一定有输出、如果没有输出。算法没有意义，便不需要算法。输出形式可以是打印，也可以是返回一个或多个值。</p></li><li><p>有穷性<br>指算法不会无穷循环，而没有结果。</p></li><li>确定性<br>执行的每一步都必须确定，相同的输入只能有唯一的输出结果。</li><li>可行性<br>每一步都是可以执行的。</li></ul><hr><h3 id="3、算法设计的要求"><a href="#3、算法设计的要求" class="headerlink" title="3、算法设计的要求"></a>3、算法设计的要求</h3><p>好的算法：</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率和低存储量</li></ul><hr><h3 id="4、算法效率的度量"><a href="#4、算法效率的度量" class="headerlink" title="4、算法效率的度量"></a>4、算法效率的度量</h3><p>时间复杂度（大O表示法）–渐进时间复杂度</p><p>时间复杂度：O（f（n））表示随问题规模n 的增长速度。是一个增长率。即时间复杂度表示随着输入大小 n 的增长，算法时间的增长速度（程序执行次数函数的增长率）；</p><p>一般情况下 ，随着 n 的增大 O（n）增长最慢的为最优算法。</p><hr><h3 id="5、渐进时间复杂度的计算"><a href="#5、渐进时间复杂度的计算" class="headerlink" title="5、渐进时间复杂度的计算"></a>5、渐进时间复杂度的计算</h3><h4 id="5-1、由执行次数T-n-推导-大O-T-n"><a href="#5-1、由执行次数T-n-推导-大O-T-n" class="headerlink" title="5-1、由执行次数T(n) 推导 大O(T(n) )"></a>5-1、由执行次数T(n) 推导 大O(T(n) )</h4><p>推导方法：</p><ul><li>1、计算出算法执行次数的函数T(n)。</li><li><p>2、常数项不影响函数的增长速度，c 代表常数。<br>  T(n)=c 时，T(n)&gt;&gt;O(n)=O(1)，<br>  T(n) !=c 时，将常数项省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个 Hello, World 的例子中 T(n) = <span class="number">2</span>，所以我们说那个函数(算法)的时间复杂度为 O(<span class="number">1</span>)。</span><br><span class="line">T(n) = n + <span class="number">29</span>，此时时间复杂度为 O(n)。</span><br></pre></td></tr></table></figure></li><li><p>3、函数高次项对于函数的增长速度影像是最大的，n<sup>3</sup>的增长速度是远超 n<sup>2</sup> 的，同时 n<sup>2</sup> 的增长速度是远超 n 的。 同时因为要求的精度不高，所以我们直接忽略低此项。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line">T(n) = n^<span class="number">3</span> + n^<span class="number">2</span> + <span class="number">29</span>，此时时间复杂度为 O(n^<span class="number">3</span>)。</span><br></pre></td></tr></table></figure><ul><li>4、因为函数的阶数对函数的增长速度的影响是最显著的，所以我们忽略与最高阶相乘的常数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line">T(n) = <span class="number">3</span>n^<span class="number">3</span>，此时时间复杂度为 O(n^<span class="number">3</span>)。</span><br></pre></td></tr></table></figure><p><strong>综合起来：如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))。为了方便描述，下文称此为 大O推导法。</strong></p><h4 id="5-2、由算法分析出执行次数-T-n"><a href="#5-2、由算法分析出执行次数-T-n" class="headerlink" title="5-2、由算法分析出执行次数 T(n)"></a>5-2、由算法分析出执行次数 T(n)</h4><p><strong>由执行次数推导出 大O 并不困难，困难的是如何从算法中分析出 执行次数 T（n）。</strong><br><strong>基本策略：由内到外、从最深层分析。如果遇到函数调用，要深入函数进行分析。</strong><br>四个便利法则：</p><ul><li>1、对于一个循环，假设循环体的时间复杂度为 O(n)，循环次数为 m，则这个循环的时间复杂度为 O(n×m)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;         <span class="comment">// 循环次数为 n</span></span><br><span class="line">        printf(<span class="string">"Hello, World!\n"</span>);      <span class="comment">// 循环体时间复杂度为 O(1)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、对于多个循环，假设循环体的时间复杂度为 O(n)，各个循环的循环次数分别是a, b, c…，则这个循环的时间复杂度为 O(n×a×b×c…)。分析的时候应该由里向外分析这些循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;         <span class="comment">// 循环次数为 n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;       <span class="comment">// 循环次数为 n</span></span><br><span class="line">            printf(<span class="string">"Hello, World!\n"</span>);      <span class="comment">// 循环体时间复杂度为 O(1)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、对于顺序执行的语句或者算法，总的时间复杂度等于其中最大的时间复杂度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一部分时间复杂度为 O(n^2)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            printf(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二部分时间复杂度为 O(n)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        printf(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4、对于条件判断语句，总的时间复杂度等于其中 时间复杂度最大的路径 的时间复杂度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 第一条路径时间复杂度为 O(n^2)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                printf(<span class="string">"输入数据大于等于零\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第二条路径时间复杂度为 O(n)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            printf(<span class="string">"输入数据小于零\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、常见的-大O-时间复杂度。"><a href="#5-3、常见的-大O-时间复杂度。" class="headerlink" title="5-3、常见的 大O 时间复杂度。"></a>5-3、常见的 大O 时间复杂度。</h4><ul><li>1、常数阶<br>O（1）</li><li>2、线性阶<br>O（n）</li><li>3、对数阶<br>O（logn）</li><li>4、平方阶<br>O（n<sup>2</sup>）</li></ul><hr><h3 id="6、最坏时间与平均情况"><a href="#6、最坏时间与平均情况" class="headerlink" title="6、最坏时间与平均情况"></a>6、最坏时间与平均情况</h3><ul><li>1、最坏时间：最坏情况运行时间的一种保证，我们提到的时间都是最坏情况的运行时间。</li><li>2、平均情况：平均运行时间是最有意义的，它是期望的运行时间。（很难通过分析得到，一般通过数据实验后估算出来。）</li></ul><p>总结：对算法的分析：1、根据运行计算平均运行时间。2、分析最坏时间。<br>一般算法分析时指的是最坏运行时间。</p><hr><h3 id="7、算法空间复杂度"><a href="#7、算法空间复杂度" class="headerlink" title="7、算法空间复杂度"></a>7、算法空间复杂度</h3><p>使用存储空间来换取运行时间</p><hr><h3 id="8、时间复杂度计算–练习"><a href="#8、时间复杂度计算–练习" class="headerlink" title="8、时间复杂度计算–练习"></a>8、时间复杂度计算–练习</h3><ul><li>1、基础题<br>求该方法的时间复杂度<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">            printf(<span class="string">"Hello World\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>参考答案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当 i = 0 时，内循环执行 n 次运算，当 i = 1 时，内循环执行 n - 1 次运算……当 i = n - 1 时，内循环执行 1 次运算。</span><br><span class="line">所以，执行次数 T(n) = n + (n - 1) + (n - 2)……+ 1 = n(n + 1) / 2 = n^2 / 2 + n / 2。</span><br><span class="line">根据上文说的 大O推导法 可以知道，此时时间复杂度为 O(n^2)。</span><br><span class="line"></span><br><span class="line">等差数列 </span><br><span class="line">通项公式：an=a1+(n-1)*d。</span><br><span class="line">求和公式：Sn=a1*n+[n*(n-1)*d]/2。</span><br></pre></td></tr></table></figure><ul><li>2、进阶题<br>求该方法的时间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        i *= <span class="number">2</span>;</span><br><span class="line">        printf(<span class="string">"%i\n"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设循环次数为 t，则循环条件满足 2^t <span class="tag">&lt; <span class="attr">n</span>。</span></span><br><span class="line"><span class="tag">可以得出，执行次数<span class="attr">t</span> = <span class="string">log(2)(n)，即</span> <span class="attr">T</span>(<span class="attr">n</span>) = <span class="string">log(2)(n)，可见时间复杂度为</span> <span class="attr">O</span>(<span class="attr">log</span>(<span class="attr">2</span>)(<span class="attr">n</span>))，即 <span class="attr">O</span>(<span class="attr">log</span> <span class="attr">n</span>)。</span></span><br></pre></td></tr></table></figure><ul><li>3、再次进阶<br>求该方法的时间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> aFunc(n - <span class="number">1</span>) + aFunc(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显然运行次数，T(0) = T(1) = 1，同时 T(n) = T(n - 1) + T(n - 2) + 1，这里的 1 是其中的加法算一次执行。</span><br><span class="line">显然 T(n) = T(n - 1) + T(n - 2) 是一个斐波那契数列，通过归纳证明法可以证明，当 n &gt;= 1 时 T(n) <span class="tag">&lt; (<span class="attr">5</span>/<span class="attr">3</span>)^<span class="attr">n</span>，同时当 <span class="attr">n</span> &gt;</span> 4 时 T(n) &gt;= (3/2)^n。</span><br><span class="line">所以该方法的时间复杂度可以表示为 O((5/3)^n)，简化后为 O(2^n)。</span><br><span class="line">可见这个方法所需的运行时间是以指数的速度增长的。如果大家感兴趣，可以试下分别用 1，10，100 的输入大小来测试下算法的运行时间，相信大家会感受到时间复杂度的无穷魅力。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;摘自大话数据结构&lt;/p&gt;
&lt;h3 id=&quot;1、算法和数据结构的关系&quot;&gt;&lt;a href=&quot;#1、算法和数据结构的关系&quot; class=&quot;headerlink&quot; title=&quot;1、算法和数据结构的关系&quot;&gt;&lt;/a&gt;1、算法和数据结构的关系&lt;/h3&gt;&lt;ul&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>第1章-数据结构绪论</title>
    <link href="http://yoursite.com/2019/03/25/%E7%AC%AC1%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/03/25/第1章-数据结构绪论/</id>
    <published>2019-03-25T02:51:43.021Z</published>
    <updated>2019-03-24T18:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]<br><strong>该笔记摘抄于 《大话数据结构》<br>工作中所需要的栈、队列、链表、散列表等结构；查找、排序等算法在开发语言的工具包中都有完美实现，为什么还要学习数据结构弄懂其算法实现的原理？</strong></p><h3 id="1、数据结构起源"><a href="#1、数据结构起源" class="headerlink" title="1、数据结构起源"></a>1、数据结构起源</h3><ul><li><p>从计算机是用来进行数据计算的到现实中的问题需要一些科学有效的手段（表、树、图等数据结构）才能处理。</p></li><li><p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。<br>注：<code>这句话应该意思是，数据结构不是研究数值和数值计算的，而是研究对象（对象不止是数值，也可能是类对象或者其他），研究这些对象之间的关系（比如有什么共同点，比如顺序如何），以及操作（比如排序，插入等）</code>。</p></li><li><p>程序设计的实质是对确定的问题选择一种好的结构、加上设计一种好的算法。<strong>即程序设计=数据结构+算法。</strong></p></li></ul><hr><h3 id="2、基本概念和术语"><a href="#2、基本概念和术语" class="headerlink" title="2、基本概念和术语"></a>2、基本概念和术语</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据结构基本概念</span></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据 – 程序的操作对象，用于描述客观事物</span></span><br><span class="line"><span class="comment">数据的特点：</span></span><br><span class="line"><span class="comment">可以输入到计算机</span></span><br><span class="line"><span class="comment">可以被计算机程序处理</span></span><br><span class="line"><span class="comment">数据是一个抽象的概念，将其进行分类后得到程序设计语言中的类型。如：int，float，char等等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据项：一个数据元素由若干数据项组成</span></span><br><span class="line"><span class="comment">数据元素：组成数据对象的基本单位</span></span><br><span class="line"><span class="comment">数据对象：性质相同的数据元素的集合（类似于数组一般）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据元素之间不是独立的，存在特定的关系，这些关系即结构</span></span><br><span class="line"><span class="comment">数据结构指数据对象中数据元素之间的关系</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个结构体类型</span></span><br><span class="line">struct Teacher   <span class="comment">//一种数据类型</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>    name[<span class="number">32</span>];<span class="comment">//数据项</span></span><br><span class="line">    <span class="keyword">char</span>    tile[<span class="number">32</span>];<span class="comment">//数据项</span></span><br><span class="line">    <span class="keyword">int</span>        age;<span class="comment">//数据项</span></span><br><span class="line">    <span class="keyword">char</span>    addr[<span class="number">128</span>];<span class="comment">//数据项</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    struct Teacher t1; <span class="comment">//数据元素</span></span><br><span class="line">    struct Teacher tArray[<span class="number">30</span>]; <span class="comment">//数据对象</span></span><br><span class="line">    memset(&amp;t1, <span class="number">0</span>, sizeof(t1));</span><br><span class="line"></span><br><span class="line">    strcpy(t1.name, <span class="string">"name"</span>); <span class="comment">//数据项</span></span><br><span class="line">    strcpy(t1.addr, <span class="string">"addr"</span>); <span class="comment">//数据项</span></span><br><span class="line">    strcpy(t1.tile, <span class="string">"addr"</span>); <span class="comment">//数据项</span></span><br><span class="line">    t1.age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3、逻辑结构与物理结构"><a href="#3、逻辑结构与物理结构" class="headerlink" title="3、逻辑结构与物理结构"></a>3、逻辑结构与物理结构</h3><p>数据结构分为逻辑结构与物理结构</p><h4 id="3-1、逻辑结构"><a href="#3-1、逻辑结构" class="headerlink" title="3-1、逻辑结构"></a>3-1、逻辑结构</h4><p><strong>是指数据对象中数据元素之间的关系。</strong><br>分为四种。</p><pre><code>- 集合结构</code></pre><p><img src="https://www.github.com/pengguozhen/xiaoshujiangTC/raw/master/小书匠/1550666857719.png" alt="集合"></p><pre><code>- 线性结构</code></pre><p><img src="https://www.github.com/pengguozhen/xiaoshujiangTC/raw/master/小书匠/1550666942223.png" alt="线性结构"></p><pre><code>- 树</code></pre><p><img src="https://www.github.com/pengguozhen/xiaoshujiangTC/raw/master/小书匠/1550666972834.png" alt="树形结构"></p><pre><code>- 图</code></pre><p><img src="https://www.github.com/pengguozhen/xiaoshujiangTC/raw/master/小书匠/1550667025595.png" alt="图形结构"></p><h4 id="3-2、物理结构（存储结构）"><a href="#3-2、物理结构（存储结构）" class="headerlink" title="3-2、物理结构（存储结构）"></a>3-2、物理结构（存储结构）</h4><p>数据的逻辑结构在计算机中的存储形式。实际上是指如何把数据元素存储到计算机存储器中的</p><p><strong>数据元素的存储结构形式有两种</strong>：<br>    顺序存储结构：如数组<br>    链式存储结构：如链表，是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以不是连续的。</p><p>注：逻辑结构是面向问题的、物理结构是面向计算机的，基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</p><h3 id="4、抽象数据类型"><a href="#4、抽象数据类型" class="headerlink" title="4、抽象数据类型"></a>4、抽象数据类型</h3><h4 id="4-1、数据类型"><a href="#4-1、数据类型" class="headerlink" title="4-1、数据类型"></a>4-1、数据类型</h4><p>计算机需要对数据进行分类，就分出来很多数据的类型。比如 int，float 等。</p><h4 id="4-2、抽象数据类型"><a href="#4-2、抽象数据类型" class="headerlink" title="4-2、抽象数据类型"></a>4-2、抽象数据类型</h4><ul><li>1、为什么需要抽象数据类型？<br>无论什么计算机、什么语言都会面临类似的整数运算，我们可以考虑将其抽象出来。抽象是抽取出事物具有的普遍性本质，是对事物的一个概括，是一种思考问题的方式。</li><li>2、定义<br>抽象数据类型（ADT）是指一个数学模型及定义在该模型上的一组操作。它仅取决于其逻辑特征，而与计算机内部如何表示和实现无关。比如刚才说得整型，各个计算机，不管大型机、小型机、PC、平板电脑甚至智能手机，都有“整型”类型，也需要整形运算，那么整型其实就是一个抽象数据类型。</li></ul><p>Java 中 接本数据类型、引用类型</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;br&gt;&lt;strong&gt;该笔记摘抄于 《大话数据结构》&lt;br&gt;工作中所需要的栈、队列、链表、散列表等结构；查找、排序等算法在开发语言的工具包中都有完美实现，为什么还要学习数据结构弄懂其算法实现的原理？&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、数据结构起源&quot;&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://yoursite.com/2019/02/14/hello-world/"/>
    <id>http://yoursite.com/2019/02/14/hello-world/</id>
    <published>2019-02-14T09:09:29.792Z</published>
    <updated>2019-03-25T04:12:46.423Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
